<?php

/**
 * os2dagsorden_importer
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package  OS2Dagsorden_Importer
 * @author   Jesper Mathiassen <jm@bellcom.dk>
 * @author   Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
define('DEFAULT_ACADRE_IMPORT_DIR', 'private://');
define('MEETINGS_FORCE_RECREATE', false); // Delete existing nodes before import
define('MEETINGS_FOCUS', false); // File key for import
define('MEETINGS_MEETING_FOCUS', false); // Meeting id
define('MEETINGS_CLEAR_COMMITTEE', true); // Clean out invalid committees

/**
 * Implementation of hook_menu
 *
 * @return list of links
 */
function os2dagsorden_meetings_menu() {
    $items = array();
    $items['os2dagsorden/test/meetings/batch'] = array(
	'page callback' => 'os2dagsorden_meetings_do_import_batch',
	'access arguments' => array('administer os2web'),
	'type' => MENU_CALLBACK,
    );
    $items['os2dagsorden/test/meetings'] = array(
        'page callback' => 'os2dagsorden_meetings_test_page',
        'access arguments' => array('administer os2web'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Implemetation of hook_cron()
 * Will run import on every cron.
 *
 * @return none
 */
function os2dagsorden_meetings_cron() {
  $options = array(
//      'callback' => '_os2dagsorden_meetings_process_manifest',
      'recurse' => FALSE,
  );
  $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
  $queue = DrupalQueue::get('import_agendas');
  //if ($queue->numberOfItems() == 0) {
    foreach ($files as $file) {
      //$queue->createItem($file->uri);
      _os2dagsorden_meetings_process_manifest($file->uri);
    }
  //}
}

/**
 * Implemetation of hook_cron_queue_info()
 *
 * @return none
 */
function os2dagsorden_meetings_cron_queue_info() {
  $queues['import_agendas'] = array(
      'worker callback' => '_os2dagsorden_meetings_process_manifest',
      'time' => 300,
  );
  return $queues;
}

/**
 * Implementation of hook_form_alter()
 * 
 * @param mixed &$form       form
 * @param mixed &$form_state state of form
 *
 * @return none
 */
function os2dagsorden_meetings_form__settings_settings_form_alter(&$form, &$form_state) {
    $form['meetings'] = array(
        '#type' => 'fieldset',
        '#title' => 'Referat import',
        '#description' => 'Indstillinger der vedrÃ¸rer importen af Acadre referater og dagsordener.',
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['meetings']['os2web_meetings_path'] = array(
        '#type' => 'textfield',
        '#title' => 'Sti til acadre publish folder.',
        '#description' => 'Dette er stien hvor Acadre publisere .XML filer til.',
        '#default_value' => variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR),
    );
}

/**
 * Implementation test page
 *
 * @return page with debug information
 */
function os2dagsorden_meetings_test_page() {
    global $debug_info;
    // 
    //     os2dagsorden_meetings_do_import();
    //     os2dagsorden_meetings_order_addenums();
    // 
    //     return '<div><textarea cols="150" rows=50>' . print_r($debug_info, 1) . '</textarea>';
    return '<a href="?q=os2dagsorden/test/meetings/batch">Start import</a>';
}

/**
 * Import xml files from the defined folder
 *
 */
function os2dagsorden_meetings_do_import_batch() {
    $focus = MEETINGS_FOCUS;
    //$focus = false;
    $batch = array(
	'title' => 'Dagsorden import',
	'operations' => array(
  //      array('_os2web_meetings_cleanup_nodes',array('meeting')),
  //      array('_os2web_meetings_cleanup_nodes',array('bullet_point')),
  //      array('_os2web_meetings_cleanup_nodes',array('bullet_point_attachment')),
	),
	'finished' => 'os2dagsorden_meetings_order_addenums',
    );
    if (MEETINGS_CLEAR_COMMITTEE) {
      //$batch['operations'][]=array('_os2web_meetings_clear_committees',array());
    }
    $options = array(
  //      'callback' => '_os2dagsorden_meetings_process_manifest',
	'recurse' => FALSE,
    );
    $files = file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
    foreach ($files as $file) {
      if ($focus !== false) {
	if (strpos($file->name, (string) $focus) !== FALSE) {
	  $batch['operations'][] = array('_os2os2dagsorden_meetings_process_manifest', array($file->uri));
	}
      } else {
	$batch['operations'][] = array('_os2os2dagsorden_meetings_process_manifest', array($file->uri));
      }
    }
    if ($focus) {
      error_log("Var: \$batch = " . print_r($batch, 1));
    }
    batch_set($batch);
    batch_process('os2dagsorden/test/meetings');
}

/**
 * Import xml files from the defined folder
 *
 * @return none
 */
function os2dagsorden_meetings_do_import() {
    $options = array(
        'callback' => '_os2dagsorden_meetings_process_manifest',
        'recurse' => FALSE,
    );
    file_scan_directory(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), '/\.xml$/i', $options);
}

/**
 * This function will set up the addenum connections for meetings.
 *
 * @return none
 */
function os2dagsorden_meetings_order_addenums() {
    // Find all meetings and gather meeting and agenda_ids
    $nodes = entity_load('node', FALSE, array('type' => 'meeting'));
    $meetings = array();
    // meetings as: $meetings[<meeting_id>][<system_id>][<node_id>]
    foreach ($nodes as $node) {
        $meetings[$node->field_meeting_id[$node->language][0]['value']][$node->field_system_id[$node->language][0]['value']] = $node->nid;
    }
    foreach ($meetings as $meeting) {
        ksort($meeting); // Lowest system id first
        $primary = array_shift($meeting); // Lowest system id is primary
        while ($next = array_shift($meeting)) {
            // Set up references for addenum agendas
            $node = $nodes[$next];
            $node->field_addenum_to[$node->language][0]['nid'] = $primary;
            node_save($node);
        }
    }
}

/**
 * Processes a manifest file
 * 
 * @param string $file File URI. Works as callback in file_scan_directory works.
 *
 * @return none
 */
function _os2dagsorden_meetings_process_manifest($file) {
    $manifest = simplexml_load_file(drupal_realpath($file));
    $items_xml = $manifest->xpath("//table[@name='producedAgenda']/fields");
    $meeting_id = (int) array_shift($manifest->xpath("//table[@name='agenda']/fields/field/@sysid"));
    foreach ($items_xml as $xml_item) {
        _os2dagsorden_meetings_process_agenda($xml_item, $meeting_id);
    }
}

/**
 * Processes an agenda item
 *
 * @param SimpleXMLElement $agendainfo_xml Chunk of XML representing the agenda part.
 *
 * @return none
 */
function _os2dagsorden_meetings_process_agenda($agendainfo_xml, $meeting_id) {
    $agendainfo = array(
        'sysid' => (int) array_shift($agendainfo_xml->xpath('field/@sysid')),
        'xmlFusionID' => (int) array_shift($agendainfo_xml->xpath('field/@xmlFusionID')),
        'xmlfilename' => (string) array_shift($agendainfo_xml->xpath('field/@xmlfilename')),
        'docID' => (string) array_shift($agendainfo_xml->xpath('field/@docID')),
        'docfilename' => (string) array_shift($agendainfo_xml->xpath('field/@docfilename')),
        'type' => (int) array_shift($agendainfo_xml->xpath('field/@type')),
        'comment' => (string) array_shift($agendainfo_xml->xpath('field/@comment')),
        'fileType' => (string) array_shift($agendainfo_xml->xpath('field/@fileType')),
        'access' => (string) array_shift($agendainfo_xml->xpath('field/@access')),
        'accessid' => (int) array_shift($agendainfo_xml->xpath('field/@accessid')),
        'publish' => (int) array_shift($agendainfo_xml->xpath('field/@publish')),
        'publishDate' => (string) array_shift($agendainfo_xml->xpath('field/@publishDate')),
        'createdDate' => (string) array_shift($agendainfo_xml->xpath('field/@createdDate')),
        'filesfolder' => (string) array_shift($agendainfo_xml->xpath('field/@filesfolder')),
        'casePublish' => (string) array_shift($agendainfo_xml->xpath('field/@casePublish')),
        'startDate' => (string) array_shift($agendainfo_xml->xpath('field/@startDate')),
        'endDate' => (string) array_shift($agendainfo_xml->xpath('field/@endDate'))
    );
    
    if (empty($agendainfo['filesfolder'])){
	$agendainfo['filesfolder'] = 'Files_' . $meeting_id . '_' . $agendainfo['docID'];
    }

    if ($agendainfo['publish'] === 1) {
        $agenda_uri = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $agendainfo['filesfolder'], $agendainfo['xmlfilename']));
        if (($agenda_uri = _os2dagsorden_meetings_similar_file_exists(drupal_realpath($agenda_uri))) !== FALSE) {
            $agenda_xml = simplexml_load_file(drupal_realpath($agenda_uri));
            $meeting = _os2dagsorden_meetings_publish_meeting($agendainfo, $agenda_xml);
        }
    }
    else {
        _os2dagsorden_meetings_unpublish_meeting($agendainfo);
    }
}

/**
 * Removes a meeting node from the infomation supplied.
 *
 * @param array $info meeting info
 * 
 * @return bool Nid og the created node.
 */
function _os2dagsorden_meetings_unpublish_meeting($info) {
    //error_log(basename(__FILE__) . ':' . __LINE__ . ' Unpublish: $agendainfo = ' . print_r($info, 1));
    //TODO: Look up nid of the meeting
    $aid = $info['sysid'];
    error_log(basename(__FILE__) . ':' . __LINE__ . ' Unpublish requested: $aid = ' . print_r($aid, 1));
    //TODO: Remove attached nodes, buttom-up
    //TODO: Remove node.
}

/**
 * Creates a meeting node from the infomation supplied.
 *
 * @param array $info meeting info
 * @param array $xml  raw xml
 * 
 * @return the created node.
 */
function _os2dagsorden_meetings_publish_meeting($info, $xml) {
    global $debug_info;
    $debug_info = $xml;

    $no_publish_committee = array(
    );

    // Create meeting node
    // Gather info
    $options = array(
        'title' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='name']")),
        'date' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='date']")),
        'finish' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='finish']")),
        'location' => (string) array_shift($xml->xpath("//table[@name='location']/fields/field[@name='name']")),
        'committee' => (string) array_shift($xml->xpath("//table[@name='committee']/fields/field[@name='name']")),
        'description' => (string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='description']")),
        'cdate' => strtotime((string) array_shift($xml->xpath("//table[@name='agenda']/fields/field[@name='producedate']"))),
        'meeting_id' => (string) array_shift($xml->xpath("//table[@name='meeting']/fields/field[@name='sysid']")),
        'committee_acadre_id' => (int) array_shift($xml->xpath("//table[@name='committee']/fields/field[@name='sysid']")),
        'id' => $info['sysid'],
    );
    if (in_array($options['committee'], $no_publish_committee)) {
        return;
    }

    //trying to get meeting from id
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_meeting_id', 'value', intval($options['meeting_id']), '=');

    $result = $query->execute();
    if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $node = reset(entity_load('node', $nids));
    }
    else {//if fails, trying to get meeting from date and committe combination. Assuming this is unique
        //getting committee tid
        $vid = db_select('taxonomy_vocabulary', 'tv')->fields('tv', array('vid'))->condition('machine_name', 'committee')->execute()->fetchField();

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'taxonomy_term')
            ->propertyCondition('vid', $vid)
            ->fieldCondition('field_committee_acadre_id', 'value', intval($options['committee_acadre_id']), '=');

        $result = $query->execute();
        if (isset($result['taxonomy_term'])) {
            $tids = array_keys($result['taxonomy_term']);
            $com_tid = reset($tids);
        }

        //getting meeting
        $meeting_start_date_0000 = date('Y-m-d 00:00:00', strtotime($options['date']));
        $meeting_start_date_2359 = date('Y-m-d 23:59:59', strtotime($options['date']));

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_date', 'value', $meeting_start_date_0000, '>=')
            ->fieldCondition('field_date', 'value', $meeting_start_date_2359, '<=')
            ->fieldCondition('field_committee', 'tid', $com_tid, '=');
        $result = $query->execute();

        if (isset($result['node'])) {
            $nids = array_keys($result['node']);
            $node = reset(entity_load('node', $nids));
        }
        else {//if fails, creating a new meeting
            $node = new stdClass();
            $node->type = "meeting";
            $node->language = LANGUAGE_NONE;

            node_object_prepare($node);    
        }
    }

    //avoiding reimports
    if (isset($node->field_meeting_acadre_version[$node->language][0])) {
      $old_version = $node->field_meeting_acadre_version[$node->language][0]['value'];
      $new_version = $info['docID'];
      if (strcmp($old_version,$new_version) >= 0){//meeting is of the same version, no need to proceed
	return $node;
      }
    }

    $node->title = $options['title'];
    $node->field_meeting_acadre_version[$node->language][0]['value'] = $info['docID'];//setting the acarde version of the meeting

    $node->field_date[$node->language][0]['value'] = $options['date'];
    $node->field_date[$node->language][0]['value2'] = $options['finish'];

    $node->field_meeting_status['und'][0]['value'] = 'Publiceret';

    // Proper id tagging
    $node->field_meeting_id[$node->language][0]['value'] = $options['meeting_id'];
    // Make sure the committee term is created and get the term.
    $committee_term = _os2dagsorden_meetings_import_committee(array_shift($xml->xpath("//table[@name='committee']")));
    //committee has not been created for some reasons - abort meeting creation
    if (!isset($committee_term))
      return $node;
      
    $node->field_committee[LANGUAGE_NONE][0]['tid'] = $committee_term->tid;
    $location_term = _os2dagsorden_meetings_import_location(array_shift($xml->xpath("//table[@name='meeting']")));
    $node->field_location[LANGUAGE_NONE][0]['tid'] = $location_term->tid;

    if (module_exists('os2web_qbrick')) {
        $movie_id = _os2web_qbrick_get_movie_id($node);
        if ($movie_id != FALSE) {
            $info['movie_id'] = $movie_id;
            $info['movie_chapters'] = _os2web_qbrick_get_chapters($movie_id);
            $node->field_qbrick_ref[$node->language][0]['id'] = $movie_id;
            $node->field_qbrick_ref[$node->language][0]['seek'] = 0;
        }
        else {
            $node->field_qbrick_ref = array();
        }
    }

    //Adding participants
    $part_names = array();
    $participants = $xml->xpath("//table[@name='committee']/table[@name='commember']/table[@name='member']");
    foreach ($participants as $participant) {
	$part_names[] = (string) array_shift($participant->xpath("fields/field[@name='name']"));
    }
    $node->field_meeting_participants[$node->language][0]['value'] = implode(', ', $part_names);

    //Add nodes for each bullet
    $items = $xml->xpath("//table[@name='agendaitemparents']");
    $item_nids = array();
    foreach ($items as $item) {
        $xml = array_shift($item->xpath("table[@name='agendaitem']"));
        $id = (int) array_shift($item->xpath("fields/field[@name='sort']"));
        $item_nids[] = _os2dagsorden_meetings_add_item($info, $xml, $id);
        // add node for each items
    }

    foreach ($item_nids as $nid) {
        $node->field_ref_bullet_points[$node->language][]['target_id'] = $nid;
    }
    
    //adding description
    $description_fid = os2dagsorden_meetings_add_meeting_description($node, $info);
    
    // Add items to meeting node.
    // Save the meeting node.
    node_submit($node);
    node_save($node);
    
    //schedule description for PDF convertion
    if (module_exists('os2dagsorden_adlib_api')) {
      os2dagsorden_adlib_api_convert_to_pdf($description_fid, $node->nid);
    }
    
    //TODO: add reference to the os2web_meetings_import table
    $record = array(
        'nid' => $node->nid,
        'aid' => $options['id'],
    );
    drupal_write_record('os2web_meetings_imported', $record);

    return $node;
}

/**
 * Add the description file (originally in DOC format) to the meeting.
 * When a new description file is available, it will replace the old file.
 *
 * @param mixed $node meeting
 * @param mixed $info xml extracted information
 *
 * @return saved file fid
 */
function os2dagsorden_meetings_add_meeting_description($node, $info){
    $description_uri = _os2dagsorden_meetings_similar_file_exists(implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $info['filesfolder'], $info['docID'] . '.' . strtoupper($info['fileType']))));

    $file = new stdClass();
    $file->uri = $description_uri;
    $file->display = 1;
    $file->filename = drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->uid = 1;
    $file->status = FILE_STATUS_PERMANENT;

    $file = file_save($file);
    
    if (strcmp($info['access'], 'Lukket') == 0) 
      $node->field_meeting_description_closed[$node->language][0] = (array) $file;
    else 
      $node->field_meeting_description[$node->language][0] = (array) $file;

    return $file->fid;
}

/**
 * Adds an item (bullet point) to the meeting
 *
 * @param mixed $info xml extracted information
 * @param mixed $xml  raw xml_item
 * @param int   $id   bullet point internal id (does not represent anything, is similar to ordinal number)
 * 
 * @return created bullet point nid
 */
function _os2dagsorden_meetings_add_item($info, $xml, $id) {
    $options = array(
        'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
        'name' => (string) array_shift($xml->xpath("fields/field[@name='name']")),
        'accessname' => (string) array_shift($xml->xpath("fields/field[@name='accessname']")),
	'caseno' => (string) array_shift($xml->xpath("fields/field[@name='caseno']")),
    );


    // Gather the bullets for the item
    $bullets = $xml->xpath("table[@name='bullet']");
    $nids = array();
    foreach ($bullets as $bullet) {
        //$bullet_id = (int) array_shift($bullet->xpath("fields/field[@name='sysid']"));
        // Add node for each bullet
        $attachment_nid = _os2dagsorden_meetings_add_bullet($bullet);
        if (isset($attachment_nid))
            $nids[] = $attachment_nid;
    }

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_bullet_point_id', 'value', intval($options['sysid']), '=');

    $result = $query->execute();
    if (isset($result['node'])) {
        $all_nids = array_keys($result['node']);
        $node = reset(entity_load('node', $all_nids));
    }
    else {
        $node = new stdClass();
        $node->type = "bullet_point";
        $node->language = LANGUAGE_NONE;

        node_object_prepare($node);

        $node->field_bullet_point_id[$node->language][0]['value'] = $options['sysid'];
    }


    $node->title = 'Punkt ' . $id . ' ' . $options['name'] . ' (' . $options['caseno'] . ')';

    if (strcmp($options['accessname'], 'Lukket') == 0) {
        $node->field_bul_point_closed[$node->language][0]['value'] = 1;
    }
    else {
        $node->field_bul_point_closed[$node->language][0]['value'] = 0;
    }

    if (isset($info['movie_id']) && is_numeric($info['movie_chapters'][$id])) {
        $node->field_qbrick_ref[$node->language][0]['id'] = $info['movie_id'];
        $node->field_qbrick_ref[$node->language][0]['seek'] = $info['movie_chapters'][$id];
    }

    foreach ($nids as $nid) {
        $node->field_ref_attachment[LANGUAGE_NONE][]['target_id'] = $nid;
    }

    $enclosures = $xml->xpath("table[@name='enclosure']");
    foreach ($enclosures as $enclosure) {
        $filename = (string) array_shift($enclosure->xpath("fields/field[@name='filename']"));
        $uri = implode('/', array(variable_get('os2web_meetings_path', DEFAULT_ACADRE_IMPORT_DIR), $info['filesfolder'], $filename));
        $filetype = (string) array_shift($enclosure->xpath("fields/field[@name='EnclosureFileType']"));

        $fid = db_select('file_managed', 'fm')
                        ->fields('fm', array('fid'))
                        ->condition('uri', $uri)
                        ->execute()->fetchField();

        if ($fid) {
	    $file = file_load($fid);
	    $file->display = 1;
        }
	else {
	    $file = new stdClass();
	    $file->uri = $uri;
	    $file->display = 1;
	    $file->filename = drupal_basename($file->uri);
	    $file->filemime = file_get_mimetype($file->uri);
	    $file->uid = 1;
	    $file->status = FILE_STATUS_PERMANENT;
	    $file = file_save($file);
	}
        $enclosure_nid = _os2dagsorden_meetings_add_enclosure_bullet($enclosure, $file);
        $contains = FALSE;
	if (isset($enclosure_nid)){//if the ID is empty - means that the enclosure has been created before, and hence already added to the bullet point
	  if (isset($node->field_ref_attachment[LANGUAGE_NONE])) {
	      foreach ($node->field_ref_attachment[LANGUAGE_NONE] as $attachment) {
		  if ($attachment['target_id'] == $enclosure_nid) {
		      $contains = TRUE;
		      break;
		  }
	      }
	  }
	  if (!$contains)
            $node->field_ref_attachment[LANGUAGE_NONE][]['target_id'] = $enclosure_nid;

	  //Adlib Conversion
	  if (module_exists('os2dagsorden_adlib_api')) {
	      drupal_load('module', 'os2dagsorden_adlib_api');

	      //if not PDF, schedule for pdf conversion as well
	      if (strcmp($filetype, ".PDF") != 0)
		  os2dagsorden_adlib_api_convert_to_pdf($file->fid, $enclosure_nid);
	  }
	  if (strcmp($filetype, ".PDF") == 0)//if is PDF, schedule for HTML conversion
		  os2dagsorden_pdf2htmlex_schedule($file->fid, $enclosure_nid);
	}        
    }

    node_submit($node);
    node_save($node);

    return $node->nid;
}

/**
 * Creates a bullet node from xml input
 *
 * @param SimpleXMLElement $xml raw xml
 * 
 * @return int - Node ID
 */
function _os2dagsorden_meetings_add_bullet(SimpleXMLElement $xml) {
    $options = array(
        'sysid' => (int) array_shift($xml->xpath("fields/field[@name='sysid']")),
        'name' => (string) array_shift($xml->xpath("fields/field[@name='bulletname']")),
        'content' => (string) array_shift($xml->xpath("fields/field[@name='bulletcontent']")),
        'type' => (int) array_shift($xml->xpath("fields/field[@name='bullettype']")),
        'weight' => (int) array_shift($xml->xpath("fields/field[@name='bulletsortorder']")),
        'lastbullet' => (int) array_shift($xml->xpath("fields/field[@name='lastbullet']")),
    );
    if (!empty($options['content'])) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_bpa_id', 'value', intval($options['sysid']), '=');

        $result = $query->execute();

        if (isset($result['node'])) {
	    //node exists, avoiding recreation
	    return;
        }
        else {
            $node = new stdClass();
            $node->type = "bullet_point_attachment";
            $node->language = LANGUAGE_NONE;

            node_object_prepare($node);
            $node->field_bpa_id[$node->language][0]['value'] = $options['sysid'];
        }

        $node->title = $options['name'];

        // Let's add standard body field
        $content_ind_start = strpos($options['content'], '<div class=Section1>');

        $options['content'] = substr($options['content'], $content_ind_start);

        $node->field_bpa_body[$node->language][0]['value'] = $options['content'];
        $node->field_bpa_body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field  

        node_submit($node);
        node_save($node);

        return $node->nid;
    }
}

/**
 * Creates an empty bullet point attachment node with file reference.
 * The file is eventually converted to HTML and the rendered output will be used as bullet point attachment body field.
 * The file is then converted to PDF (is the file extension is not PDF already)
 *
 * @param SimpleXMLElement $enclosure xml
 * @param stdClass         $file      file
 * 
 * @author Stanislav Kutasevits
 * 
 * @return int - Node ID
 */
function _os2dagsorden_meetings_add_enclosure_bullet($enclosure, $file) {
    $options = array(
        'sysid' => (int) array_shift($enclosure->xpath("fields/field[@name='sysid']")),
        'name' => (string) array_shift($enclosure->xpath("fields/field[@name='name']")),
    );

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_bpa_id', 'value', intval($options['sysid']), '=');

    $result = $query->execute();
    if (isset($result['node'])) {
	//node exists, avoiding recreation
	return;
    }
    else {
        $node = new stdClass();
        $node->type = "bullet_point_attachment";
        $node->language = LANGUAGE_NONE;

        node_object_prepare($node);
        $node->field_bpa_id[$node->language][0]['value'] = $options['sysid'];
    }

    $node->title = 'Bilag: ' . $options['name'];

    $node->field_bpa_file[$node->language][] = (array) $file;

    node_submit($node);
    node_save($node);

    return $node->nid;
}

/**
 * Processes xml for committee and creates terms as needed.
 *
 * @param SimpleXMLElement $xml
 * @return \stdClass 
 */
function _os2dagsorden_meetings_import_committee(SimpleXMLElement $xml) {
    $options = array(
        'name' => (string) array_shift($xml->xpath("fields/field[@name='name']")),
        'description' => (string) array_shift($xml->xpath("fields/field[@name='description']")),
        'dept_id' => (int) array_shift($xml->xpath("fields/field[@name='deptid']")),
        'dept_name' => (string) array_shift($xml->xpath("fields/field[@name='departmentName']")),
        'acadre_id' => (int) array_shift($xml->xpath("fields/field[@name='sysid']"))
    );

    $vid = db_select('taxonomy_vocabulary', 'tv')
        ->fields('tv', array('vid'))
        ->condition('machine_name', 'committee')
        ->execute()
        ->fetchField();

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
        ->propertyCondition('vid', $vid)
        ->fieldCondition('field_committee_acadre_id', 'value', intval($options['acadre_id']), '=');

    $result = $query->execute();
    if (isset($result['taxonomy_term'])) {
        $tids = array_keys($result['taxonomy_term']);
        $term = taxonomy_term_load($tids[0]);
        
        $term->name = $options['name'];
	$term->description = $options['description'];
	
	taxonomy_term_save($term);

	return $term;
    }
    else {//not allowing to create new committees in here, new committees can be only created from SOFD views using os2dagsorden_importer
	return;
//         $term = new stdClass();
//         $term->vid = $vid;
//         $term->language = LANGUAGE_NONE;
    }
}

/**
 * Processes xml for location and creates terms as needed.
 *
 * @param SimpleXMLElement $xml raw xml
 * 
 * @return \stdClass
 */
function _os2dagsorden_meetings_import_location(SimpleXMLElement $xml) {
    //TODO: Process members of the committee.
    //FIXME: MAke vocab name configurable.
    $vid = db_select('taxonomy_vocabulary', 'tv')
            ->fields('tv', array('vid'))
            ->condition('machine_name', 'lokation')
            ->execute()
            ->fetchField();

    $term = new stdClass();
    $term->vid = $vid;
    $term->name = (string) array_shift($xml->xpath("fields/field[@name='location']"));
    $term->description = (string) array_shift($xml->xpath("fields/field[@name='address']"));

    $tid = db_select('taxonomy_term_data', 'td')
                    ->fields('td', array('tid'))
                    ->condition('name', $term->name)
                    ->condition('vid', $term->vid)
                    ->execute()->fetchObject();

    if (isset($tid->tid) && $tid->tid > 0) {
        $term->tid = (int) $tid->tid;
    }
    taxonomy_term_save($term);

    error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $term = ' . print_r($term, 1));
    return $term;
}

/**
 * Case insensitive fileexists(). Code from comments on php.net
 *
 * @param string $filename name of file
 * 
 * @return mixed Flase if file not found, case corrected filename if found.
 */
function _os2dagsorden_meetings_similar_file_exists($filename) {
    if (file_exists($filename)) {
        return $filename;
    }
    $dir = dirname($filename);
    error_log($dir);
    $files = glob($dir . '/*');
    $lcaseFilename = strtolower($filename);
    if (!empty($files)){
      foreach ($files as $file) {
	  if (strtolower($file) == $lcaseFilename) {
	      return $file;
	  }
      }
    }
    return FALSE;
}

/**
 * Hook to node update method. Will refresh the meeting search metadatawith the information from 
 * updated node (either bullet point or bullet point attachment)
 *
 * @param mixed $node node
 *
 * @return none
 */
function os2dagsorden_meetings_node_update($node) {
    if ($node->type === 'bullet_point') {
        //resetting cache
        entity_get_controller('node')->resetCache(array($node->nid));

        //updating meeting (updates search meta-data)
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_ref_bullet_points', 'target_id', $node->nid, '=');
        $result = $query->execute();

        if (isset($result['node'])) {
            $nids = array_keys($result['node']);
            $meeting = reset(entity_load('node', $nids));

            node_save($meeting);
        }
    }
    if ($node->type === 'bullet_point_attachment') {
        //resetting cache
        entity_get_controller('node')->resetCache(array($node->nid));

        //updating bullet point (will call bullet point presave hook, which updates meeting search meta-data)
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->fieldCondition('field_ref_attachment', 'target_id', $node->nid, '=');
        $result = $query->execute();

        if (isset($result['node'])) {
            $nids = array_keys($result['node']);
            $bullet_point = reset(entity_load('node', $nids));

            node_save($bullet_point);
        }
    }
}

/**
 * Hook to node delete method. If a bullet point attachment is deleted will delete its attached files, 
 * if a meeting is deleted - will delete all the bullet points attached
 *
 * @param mixed $node
 *
 * @return none
 */
function os2dagsorden_meetings_node_delete($node) {
    if ($node->type === 'meeting') {
//     db_delete('os2web_meetings_imported')->condition('nid', $node->nid)->execute();
//     //TODO: Delete bullets from meeting.
//     foreach ($node->field_ref_bullet_points[$node->language] as $nids) {
//       node_delete($nids['target_id']);
//     }
    }
    if ($node->type === 'bullet_point') {
//     //TODO: Delete bullet attachments from meeting.
//     if (isset($node->field_ref_attachment[$node->language])) {
//       foreach ($node->field_ref_attachment[$node->language] as $nids) {
//         node_delete($nids['target_id']);
//       }
//     }
//     if (isset($node->field_enclosures[$node->language])) {
//       foreach ($node->field_enclosures[$node->language] as $file) {
//       file_delete((object) $file, TRUE);
//       }
//     }
    }
}