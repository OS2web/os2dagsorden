<?php
/**
 * Implement hook_enable()
 *
 * Make sure this modules hooks are called after taxonomy and i18ntaxonomy.
 */
function os2web_taxonomy_autocomplete_enable() {
  $weight = db_query("SELECT weight FROM {system} WHERE name IN (:tax, :i18n) ORDER by weight DESC",
    array(':tax' => 'taxonomy', ':i18n' => 'i18ntaxonomy'))->fetchField();
  $weight++;
  db_query("UPDATE {system} SET weight = :weight WHERE name  = :settings",
    array(':weight' => $weight, ':settings' => 'os2web_taxonomy_autocomplete'));
}

/**
 * Implementation of hook_menu_alter().
 *
 * alter taxonomy autocompletion
 */
function os2web_taxonomy_autocomplete_menu_alter(&$items) {	
   $items['taxonomy/autocomplete'] = array(
    'title' => 'OS2Web Autocomplete Taxonomy',
    'page callback' => 'os2web_taxonomy_autocomplete_taxonomy_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => '',
  );   
}

/**
 * Page callback: Outputs JSON for taxonomy autocomplete suggestions.
 *
 * Path: taxonomy/autocomplete
 *
 * This callback outputs term name suggestions in response to Ajax requests
 * made by the taxonomy autocomplete widget for taxonomy term reference
 * fields. The output is a JSON object of plain-text term suggestions, keyed by
 * the user-entered value with the completed term name appended.  Term names
 * containing commas are wrapped in quotes.
 *
 * For example, suppose the user has entered the string 'red fish, blue' in the
 * field, and there are two taxonomy terms, 'blue fish' and 'blue moon'. The
 * JSON output would have the following structure:
 * @code
 *   {
 *     "red fish, blue fish": "blue fish",
 *     "red fish, blue moon": "blue moon",
 *   };
 * @endcode
 *
 * @param $field_name
 *   The name of the term reference field.
 * @param $tags_typed
 *   (optional) A comma-separated list of term names entered in the
 *   autocomplete form element. Only the last term is used for autocompletion.
 *   Defaults to '' (an empty string).
 *
 * @see taxonomy_menu()
 * @see taxonomy_field_widget_info()
 */
function os2web_taxonomy_autocomplete_taxonomy_autocomplete($field_name, $tags_typed = '') {
  $field = field_info_field($field_name);

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($tags_typed);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  $matches = array();
  if ($tag_last != '') {

    // Part of the criteria for the query come from the field's own settings.
    $vids = array();
    $vocabularies = taxonomy_vocabulary_get_names();
    foreach ($field['settings']['allowed_values'] as $tree) {
      $vids[] = $vocabularies[$tree['vocabulary']]->vid;
    }

    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');
	
	// Do not return terms that are discontinued
	$query->leftJoin('field_data_field_discontinued', 'd', 't.tid = d.entity_id'); 
	$query->where('(d.field_discontinued_value IS NULL OR d.field_discontinued_value = 0)');
	
	// Only return KLE terms in third level of the hierarchy
	if( in_array($vocabularies['kle']->vid,$vids) ) {
	  $query->leftJoin('taxonomy_term_hierarchy', 'p1', 'p1.tid = t.tid'); 
	  $query->leftJoin('taxonomy_term_hierarchy', 'p2', 'p2.tid = p1.parent');
	  $query->condition('p2.parent','0','<>');
	}	 
		
    // Do not select already entered terms.
    if (!empty($tags_typed)) {
      $query->condition('t.name', $tags_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $tags_return = $query
      ->fields('t', array('tid', 'name'))
	  ->orderBy("LEFT(name,Length('$tag_last')-1)='$tag_last'", 'DESC')// Order by entered tag at beginning of term name
	  ->orderBy('name','asc')
      ->condition('t.vid', $vids)
      ->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE')
      ->range(0, 30)
      ->execute()
      ->fetchAllKeyed();

    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) . ', ' : '';

    $term_matches = array();
    foreach ($tags_return as $tid => $name) {
      $n = $name;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
        $n = '"' . str_replace('"', '""', $name) . '"';
      }
      $term_matches[$prefix . $n] = check_plain($name);
    }
  }

  drupal_json_output($term_matches);
}
