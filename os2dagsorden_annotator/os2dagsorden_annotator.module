<?php

/**
 * os2dagsorden_annotator
 *
 * PHP version 5
 *	
 * @category OS2Dagsorden
 * @package  OS2Dagsorden_Annotator
 * @author   Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
require drupal_get_path('module', 'os2dagsorden_annotator') . '/includes/os2dagsorden_annotator.common.inc';

/**
 * Implementation of hook_menu().
 *
 * @return array of links.
 */
function os2dagsorden_annotator_menu() {
    $items = array();

    $items['meeting/%/bullet-point/%/bullet-point-attachment/%'] = array(
        'title' => 'Bilag',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_view',
        'access arguments' => array(1, 3, 5),
        'access callback' => '_os2dagsorden_annotator_check_permission',
        'page arguments' => array(1, 3, 5)
    );

    $items['meeting/%/bullet-point/%/bullet-point-attachment/%/print'] = array(
        'title' => 'Bilag Print Version',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_view_print',
        'access arguments' => array(1, 3, 5),
        'access callback' => '_os2dagsorden_annotator_check_permission',
        'page arguments' => array(1, 3, 5)
    );

    $items['annotator/create'] = array(
        'title' => 'Creating note',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_create',
	'access arguments' => array('access content')
    );

    $items['annotator/read/%'] = array(
        'title' => 'Reading note',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_read',
	'access arguments' => array('access content'),
	'page arguments' => array(2),
    );

    $items['annotator/update/%'] = array(
        'title' => 'Updating note',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_update',
	'access arguments' => array('access content'),
	'page arguments' => array(2),
    );

    $items['annotator/delete/%'] = array(
        'title' => 'Updating note',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_delete',
	'access arguments' => array('access content'),
	'page arguments' => array(2),
    );

    $items['annotator/search'] = array(
        'title' => 'Creating note',
        'type' => MENU_CALLBACK,
        'page callback' => '_os2dagsorden_annotator_search',
	'access arguments' => array('access content')
    );

    return $items;
}

/**
 * Implementation create note endpoint.
 * Creates a note, saves it in the database and redirects to the read endpoint in order to update a note with generated ID.
 *
 * @return none.
 */
function _os2dagsorden_annotator_create() {
    global $user;
    
    $note_json = json_decode(file_get_contents('php://input'), true);

    //saving fields, that fill be used for search
    $bilag_id = $note_json['bilag_id'];
    $bullet_point_id = $note_json['bullet_point_id'];
    $meeting_id = $note_json['meeting_id'];

    //filtering on fields - removing those, that are saved separatelly
    unset($note_json['bilag_id']);
    unset($note_json['bullet_point_id']);
    unset($note_json['meeting_id']);

    $last_ins_id = db_insert('os2dagsorden_annotator_notes')
    ->fields(array(

      'bilag_id' => $bilag_id,
      'bullet_point_id' => $bullet_point_id,
      'meeting_id' => $meeting_id,
      'uid' => $user->uid,
      'note_info' => json_encode($note_json),
    ))
    ->execute();

    //redirect to read - updating the note ID
    header("HTTP/1.1 303 See Other");
    header("Location: ".$GLOBALS['base_path'] . '?q=annotator/read/'.$last_ins_id);
}

/**
 * Implementation read note endpoint.
 * Updates a freshly created note with the generated id.
 *
 * @return the found note in JSON.
 */
function _os2dagsorden_annotator_read($id) {
    global $user;
    
    $result = db_select('os2dagsorden_annotator_notes', 'notes')
	->fields('notes')
	->condition('id', $id,'=')
	->condition('uid', $user->uid,'=')
	->execute();

    //print the found note
    while($record = $result->fetchAssoc()) {
      $note_arr = json_decode($record['note_info']);

      //adding missing fields
      $note_arr->id = $id;
      $note_arr->user = $user->name;
      $note_arr->permissions = array();
    
      print(json_encode($note_arr));
    }
}

/**
 * Implementation update note endpoint.
 * Updates the content of the note.
 *
 * @param int $id the note id
 *
 * @return none.
 */
function _os2dagsorden_annotator_update($id) {    
    global $user;
    $note_json = json_decode(file_get_contents('php://input'), true);

    //filtering on fields - removing those, that are saved separatelly
    unset($note_json['id']);
    unset($note_json['user']);
    unset($note_json['permissions']);
    unset($note_json['bilag_id']);
    unset($note_json['bullet_point_id']);
    unset($note_json['meeting_id']);

    db_update('os2dagsorden_annotator_notes')
      ->fields(array(
	'note_info' => json_encode($note_json),
      ))
      ->condition('id', $id, '=')
      ->execute();
}

/**
 * Implementation delete note endpoint.
 * Deletes the node from the database
 *
 * @param int $id the note id
 *
 * @return none.
 */
function _os2dagsorden_annotator_delete($id) {
    db_delete('os2dagsorden_annotator_notes')
      ->condition('id', $id)
      ->execute();
}

/**
 * Implementation search notes endpoint.
 * Makes and sql-query to the database with a params taken from $_GET.
 *
 * @return list of notes in JSON.
 */
function _os2dagsorden_annotator_search() {
    global $user;
    
    $result = db_select('os2dagsorden_annotator_notes', 'notes')
	->fields('notes')
	->condition('uid', $user->uid,'=')
	->condition('bilag_id', $_GET['bilag_id'],'=')
	->condition('bullet_point_id', $_GET['bullet_point_id'],'=')
	->condition('meeting_id', $_GET['meeting_id'],'=')
	->execute();

    //start of json
    print('
      {
      "total": "'.$result->rowCount().'",
      "rows": [');

    //looping through notes, adding them to array
    $notes = array();
    while($record = $result->fetchAssoc()) {
      $note_arr = json_decode($record['note_info']);

      //adding missing fields
      $note_arr->id = $record['id'];
      $note_arr->user = $user->name;
      $note_arr->permissions = array();

      $notes[] = json_encode($note_arr);
    }

    //printing each note and adding come, if note is not last one in the list
    for ($i = 0; $i < count($notes); $i++){
      print($notes[$i]);
      if ($i < count($notes)-1)
	print(',');
    }

    //end of json
    print(']
	    }');
}

/**
 * Checks if a user is allowed to access the requested page.
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 * @param int $bilag_id        ID of the attachment (bilag)
 *
 * @return calls the function, that checks if a user is allowed 
 * to see a specific bullet point.
 */
function _os2dagsorden_annotator_check_permission($meeting_id, $bullet_point_id, $bilag_id) {
    return os2dagsorden_access_helper_check_user_can_see_bullet_point_attachment($meeting_id, $bullet_point_id, $bilag_id);
}

/**
 * Serves the attachment with annotating option.
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 * @param int $bilag_id        ID of the attachment (bilag)
 *
 * @return the html code of the specific attachment with annotating option.
 */
function _os2dagsorden_annotator_view($meeting_id, $bullet_point_id, $bilag_id) {
    global $base_url;
    $q = explode('/', $_GET['q']);
    $breadcrumb[] = l('Hjem', $base_url);
    $breadcrumb[] .= l('MÃ¸dedetaljer', 'meeting/' . $q[1]);
    $breadcrumb[] .= l('Dagsordenspunkt', 'meeting/' . $q[1] . '/bullet-point/' . $q[3]);
    $breadcrumb[] .= '<span class="breadcrumb-active">Bilag</span>';
    drupal_set_breadcrumb($breadcrumb);

    $bilag = node_load($bilag_id);
    if (strcmp($bilag->type, 'bullet_point_attachment') == 0) {
        drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/annotator-full.min.js');
        drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/touch-plugin/annotator.touch.min.js');
        drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/json2.js');

        //drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/js/os2dagsorden_annotator.js');
        drupal_add_js(drupal_get_path('module', 'os2dagsorden_annotator') . '/js/os2dagsorden_annotator_secure.js');

        global $user, $base_path;
        drupal_add_js('init("' . $user->name . '","' . $meeting_id . '","' . $bullet_point_id . '","' . $bilag_id . '","' . $base_path . '?q=");', 'inline');

        drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/touch-plugin/annotator.touch.css');
        drupal_add_css(drupal_get_path('module', 'os2dagsorden_annotator') . '/lib/annotator-full.min.css');

        drupal_set_title(t('Bilag') . ' - ' . $bilag->title);
        $text = $bilag->field_bpa_body['und'][0]['safe_value'];
    }

    $download_pdf_link = file_create_url($bilag->field_bpa_file['und'][0]['uri']);
    $print_link = $GLOBALS['base_path'] . '?q=/print/meeting/' . $meeting_id . '/bullet-point/' . $bullet_point_id . '/bullet-point-attachment/' . $bilag_id . '/print';


    $html = '<div class="node">
	    <div class="help-button" title="Help text goes here"></div>
	    <div align="right">';

    if (!empty($bilag->field_bpa_file['und'][0]['uri']))
      $html .= '<input style="margin-right:10px;" class="form-submit" type="button" onclick="window.open(\'' . file_create_url($bilag->field_bpa_file['und'][0]['uri']) . '\')" value="Hent PDF-version">';
      
	    
    $html .= '<input class="form-submit" type="button" onclick="window.open(\'' . $print_link . '\')" value="Print"></div>' .
            '<div id="content">' . $text . '</div>
            </div>';

    return $html;
}

/**
 * Serves the print version of attachment with annotating option.
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 * @param int $bilag_id        ID of the attachment (bilag)
 *
 * @return the html code for print version of the specific attachment with annotating option.
 */
function _os2dagsorden_annotator_view_print($meeting_id, $bullet_point_id, $bilag_id) {
    $bilag = node_load($bilag_id);
    if (strcmp($bilag->type, 'bullet_point_attachment') == 0) {

        drupal_set_title(t('Bilag') . ' - ' . $bilag->title);
        $header = '<h3>Bilag - ' . $bilag->title . '</h3>';

        $body = $bilag->field_bpa_body['und'][0]['safe_value'];

        //getting annotations from storage
        $annotations = os2dagsorden_annotator_get_notes_by_attachment_id($bilag_id);

        //initiating variabes
        $annotation_list = '';
        $note_nr = 1;

        //printing annotations one by one in right order
        while (!empty($annotations)) {
            //flushing array indexing
            $annotations = array_values($annotations);

            $first_note_ind = 0;
            for ($i = 1; $i < count($annotations); $i++) {
                if ($annotations[$i]->ranges[0]->startOffset < $annotations[$first_note_ind]->ranges[0]->startOffset)
                    $first_note_ind = $i;
            }
            $body = _os2dagsorden_annotator_append_index($body, $annotations[$first_note_ind], $note_nr);
            $annotation_list .= _os2dagsorden_annotator_append_note($annotations[$first_note_ind], $note_nr);
            $note_nr++;

            unset($annotations[$first_note_ind]);
        }

        $text = $header;
        $text .= $body;
        $text .= "<hr/>";
        $text .= $annotation_list;
    }

    return ('<div class="node" id="content">' . $text . '</div>');
}

/**
 * Appends the right index number to a word/set of words, that has a annotation attached.
 *
 * @param string $body    the entire text of the attachment
 * @param string $note    the note object
 * @param int    $note_nr the ordinal number of the note
 *
 * @return the modified body text with attached index.
 */
function _os2dagsorden_annotator_append_index($body, $note, $note_nr) {
    $positionStart = strpos($body, $note->quote, $note->ranges['0']->startOffset);
    $positionEnd = $positionStart + strlen($note->quote);
    $body = substr_replace($body, '<sup><b>[' . $note_nr . ']</b></sup>', $positionEnd, 0);

    return $body;
}

/**
 * Composes the line with note ordinal index and the note text.
 * Is used below the attachment text as footnotes.
 *
 * @param string $note  the note object
 * @param int    $index the ordinal number of the note
 *
 * @return the footnote with note text.
 */
function _os2dagsorden_annotator_append_note($note, $index) {
    return '<b>[' . $index . ']</b> ' . $note->text . '<br/>';
}