<?php

/**
 * Implementation of hook_menu
 *
 * @return list of links
 */
function os2dagsorden_admin_suite_menu() {
    $items = array();
    
    $items['os2dagsorden/admin_suite/update_files_path'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_files_path',
        'access arguments' => array('administer os2web'),
    );
    
    $items['os2dagsorden/admin_suite/set_bullet_point_number'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_set_bullet_point_number',
        'access arguments' => array('administer os2web'),
    );
    
    $items['os2dagsorden/admin_suite/update_meeting_status'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_meeting_status',
        'access arguments' => array('administer os2web'),
    );
    
    return $items;
}    

/**
  * Updates the meeting statuses to dagsorden/dagsorden+, referat/referat+
  * also sets the right acadre id to the meeting
  *
  * @return none
  */
function os2dagsorden_admin_suite_update_meeting_status(){
    $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');
    foreach ($meetings as $meeting){
      $versions = os2web_esdh_provider_invoke('mm', 'import_meeting', $meeting);
      $type = '';
      foreach ($versions as $version){
	$type = $version['type'];
      }
      
      $last_ver = end($versions);
      
      //trying to get meeting from id
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_meeting_acadre_id', 'value', $meeting['id'], '=');
	  
      $result = $query->execute();
      if (isset($result['node'])) {
	  $nids = array_keys($result['node']);
	  $node = reset(entity_load('node', $nids));
      }
      else {//if fails, trying to get meeting from date and committe combination. Assuming this is unique
	  //getting committee tid
	  $vid = db_select('taxonomy_vocabulary', 'tv')->fields('tv', array('vid'))->condition('machine_name', 'committee')->execute()->fetchField();

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'taxonomy_term')
	      ->propertyCondition('vid', $vid)
	      ->fieldCondition('field_committee_acadre_id', 'value', $last_ver['committee_id'], '=');

	  $result = $query->execute();
	  if (isset($result['taxonomy_term'])) {
	      $tids = array_keys($result['taxonomy_term']);
	      $com_tid = reset($tids);
	  }

	  //getting meeting
	  $meeting_start_date_0000 = date('Y-m-d 00:00:00', strtotime($last_ver['meeting_date_start']));
	  $meeting_start_date_2359 = date('Y-m-d 23:59:59', strtotime($last_ver['meeting_date_start']));

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'node')
	      ->fieldCondition('field_date', 'value', $meeting_start_date_0000, '>=')
	      ->fieldCondition('field_date', 'value', $meeting_start_date_2359, '<=')
	      ->fieldCondition('field_committee', 'tid', $com_tid, '=');
	  $result = $query->execute();

	  if (isset($result['node'])) {
	      $nids = array_keys($result['node']);
	      $node = reset(entity_load('node', $nids));
	  }
	  else {
	      print_r("nothing found");
	      print_r("<br/>");
	      print_r("<br/>");
	  }
      }
      
      $node->field_meeting_acadre_id[LANGUAGE_NONE][0]['value'] = $meeting['id'];
      
      if (strcmp($type, 'Dagsorden') == 0){//is dagsorden
	if (os2dagsorden_admin_suite_meeting_fully_converted($node))//everything is converted
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Dagsorden+');
	else
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Dagsorden');
      }
      else {//is is referat
	if (os2dagsorden_admin_suite_meeting_fully_converted($node))//everything is converted
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Referat+');
	else
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Referat');
      }
	
      print_r('DONE: nid[' . $node->nid . '] meeting id[' . $meeting['id'] . '] - ' . $node->field_meeting_status['und'][0]['value']);
      print_r("here: " . os2dagsorden_admin_suite_meeting_fully_converted($node));
      print_r("<br/>");
      print_r("<br/>");
    }    
}

/**
  * Checks if all of the meeitng bullet point bilga were converted
  *
  * @return none
  */
function os2dagsorden_admin_suite_meeting_fully_converted($meeting){
	$all_attachments_converted = true;
	
	//goint through all the meetings bullet points
	if (!empty($meeting->field_ref_bullet_points['und'])) {
	    foreach ($meeting->field_ref_bullet_points['und'] as $ref_bullet_point) {
		$bullet_point = node_load($ref_bullet_point['target_id']);
		
		//going through all the bullet points attachments
		if (!empty($bullet_point->field_ref_attachment['und'])) {
		    foreach ($bullet_point->field_ref_attachment['und'] as $ref_bullet_point_attachment) {
			$attachment = node_load($ref_bullet_point_attachment['target_id']);
			
			if (empty($attachment->field_bpa_body['und'][0]['value']) && empty($attachment->field_bpa_file_html['und'][0])){
			  $all_attachments_converted = false;
			  break;
			}
		    }
		}
	    }
	}
	return $all_attachments_converted;
}

/**
  * Sets the bullet point number from the bullet point title, assuming that title is "Punkt [number] ...]
  *
  * @return none
  */
function os2dagsorden_admin_suite_set_bullet_point_number(){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('bullet_point'));
		//->fieldCondition('field_bul_point_number', 'value', 'NULL', '!=');
    $result = $query->execute();
    
    
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      foreach ($nids as $nid){
	$bullet_point = node_load($nid);
	if (field_get_items('node', $bullet_point, 'field_bul_point_number') == NULL) {
	  print_r("Doing: " . $nid);
	  $title = $bullet_point->title;
	  $title_arr = explode(" ", $title);
	  if (strcmp($title_arr[1], "Punkt") != 0){
	    $number = $title_arr[1];
	  } 
	  else {
	    $number = $title_arr[2];
	  }
	  
	  $bullet_point->field_bul_point_number['und'][0]['value'] = $number;
	  node_save($bullet_point);
	  print_r(" Done");
	  print_r("<br/><br/>");
	} else {
	  print_r("Skipped: " . $nid);
	  print_r("<br/><br/>");
	}
      }
    }
	
}

/**
  * Updates the all the files (and the notes they are attached to: either meeting or bullet point attachment) 
  * which have url set as 'public://acadre/Files_...' to 'private:///Files...'
  *
  * @return none
  */
function os2dagsorden_admin_suite_update_files_path(){
  $files = entity_load('file');
  foreach ($files as $file){
    //add check of path
    print_r($file);
    print_r("<br/>");
    
    $public = 'public://acadre';
    $private = 'private://';
    
    //bullet_point_attachment
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('bullet_point_attachment'))
		->fieldCondition('field_bpa_file', 'fid', $file->fid, '=');
    $result = $query->execute();
	
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $bullet_point_attachment = reset(entity_load('node', $nids));
		 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($bullet_point_attachment);
	    print_r("hit meeting bpa");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
        
    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('meeting'))
		->fieldCondition('field_meeting_description', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));
		 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting closed");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
    
    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('meeting'))
		->fieldCondition('field_meeting_description_closed', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));
	 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting opened");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
  }
}


/**
  * Return is a string is starting with some other string
  *
  * @param string $haystack where to look
  * @param string $needle   what to look for
  *
  * @return TRUE of FALSE
  */
function os2dagsorden_admin_suite_starts_with($haystack, $needle)
{
    return !strncmp($haystack, $needle, strlen($needle));
}
