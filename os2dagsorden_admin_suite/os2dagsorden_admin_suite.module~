<?php

/**
 * Implementation of hook_menu
 *
 * @return list of links
 */
function os2dagsorden_admin_suite_menu() {
    $items = array();
    
    $items['os2dagsorden/admin_suite/update_files_path'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_files_path',
        'access arguments' => array('administer os2web'),
    );
    
    $items['os2dagsorden/admin_suite/set_bullet_point_number'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_set_bullet_point_number',
        'access arguments' => array('administer os2web'),
    );
    
    return $items;
}    

/**
  * Sets the bullet point number from the bullet point title, assuming that title is "Punkt [number] ...]
  *
  * @return none
  */
function os2dagsorden_admin_suite_set_bullet_point_number(){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('bullet_point'));
		//->fieldCondition('field_bul_point_number', 'value', 'NULL', '!=');
    $result = $query->execute();
    
    
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      foreach ($nids as $nid){
	$bullet_point = node_load($nid);
	if (field_get_items('node', $bullet_point, 'field_bul_point_number') == NULL) {
	  print_r("Doing: " . $nid);
	  $title = $bullet_point->title;
	  $title_arr = explode(" ", $title);
	  if (strcmp($title_arr[1], "Punkt") != 0){
	    $number = $title_arr[1];
	  } 
	  else {
	    $number = $title_arr[2];
	  }
	  
	  $bullet_point->field_bul_point_number['und'][0]['value'] = $number;
	  node_save($bullet_point);
	  print_r("Done: " . $nid);
	  print_r("<br/><br/>");
	} else {
	  print_r("Skipped: " . $nid);
	  print_r("<br/><br/>");
	}
      }
    }
	
}

/**
  * Updates the all the files (and the notes they are attached to: either meeting or bullet point attachment) 
  * which have url set as 'public://acadre/Files_...' to 'private:///Files...'
  *
  * @return none
  */
function os2dagsorden_admin_suite_update_files_path(){
  $files = entity_load('file');
  foreach ($files as $file){
    //add check of path
    print_r($file);
    print_r("<br/>");
    
    $public = 'public://acadre';
    $private = 'private://';
    
    //bullet_point_attachment
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('bullet_point_attachment'))
		->fieldCondition('field_bpa_file', 'fid', $file->fid, '=');
    $result = $query->execute();
	
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $bullet_point_attachment = reset(entity_load('node', $nids));
		 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($bullet_point_attachment);
	    print_r("hit meeting bpa");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
        
    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('meeting'))
		->fieldCondition('field_meeting_description', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));
		 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting closed");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
    
    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('meeting'))
		->fieldCondition('field_meeting_description_closed', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));
	 
	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting opened");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
  }
}


/**
  * Return is a string is starting with some other string
  *
  * @param string $haystack where to look
  * @param string $needle   what to look for
  *
  * @return TRUE of FALSE
  */
function os2dagsorden_admin_suite_starts_with($haystack, $needle)
{
    return !strncmp($haystack, $needle, strlen($needle));
}
