<?php

/**
 * @file
 * Code for the OS2Web indstillinger feature.
 */
include_once('os2web_settings.features.inc');

function os2web_settings_permission() {
    return array(
        'administer os2web' => array(
            'title' => 'Administer OS2Web',
            'description' => 'Access settings and administration pages for OS2Web'
        ),
    );
}

/**
 * Implementation of hook_menu()
 *
 */
function os2web_settings_menu() {
    $items['admin/config/os2web'] = array(
        'title' => 'OS2Web Setup',
        'description' => 'Set up OS2 cms services',
        'position' => 'right',
        'weight' => -15,
        'access arguments' => array('administer os2web'),
        'page callback' => 'system_admin_menu_block_page',
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/os2web/settings'] = array(
        'title' => 'OS2web Settings',
        'description' => 'General settings for the OS2Web project',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('os2web_settings_settings_form'),
        'access arguments' => array('administer os2web'),
        'type' => MENU_NORMAL_ITEM | MENU_DEFAULT_LOCAL_TASK,
        'file' => 'os2web_settings.admin.inc',
    );
    $items['admin/config/os2web/import'] = array(
        'title' => 'OS2web Imports',
        'description' => 'Fire all initial imports.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('os2web_settings_import_form'),
        'access arguments' => array('administer os2web'),
        'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    );
    $items['os2web/settings/test'] = array(
        'title' => 'OS2web Test',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('os2web_settings_start_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['os2web/settings/ahahdebug'] = array(
        'page callback' => 'os2web_settings_ahahdebug',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function os2web_settings_import_form_submit($form, $form_state) {
    error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
}

function os2web_settings_import_form($form, $form_state) {
    $form['start'] = array(
        '#type' => 'submit',
        '#value' => t('Start import'),
    );
    return $form;
}

// ---- batch update code
function os2web_settings_start_form() {
    $form['description'] = array(
        '#type' => 'markup',
        '#value' => 'Denne knap retter sprog problemer.',
    );
    $form['start'] = array(
        '#type' => 'submit',
        '#value' => 'Start fix',
    );
    // $form['debug_node_id'] = array(
    //     '#type' => 'textfield',
    // );
    // $form['debug_node'] = array(
    //     '#type' => 'button',
    //     '#value' => 'Load node',
    //     '#ahah' => array(
    //         'event' => 'change',
    //         'path' => 'os2web/settings/ahahdebug',
    //         'wrapper' => 'debuginfo',
    //         'effect' => 'fade',
    //         'method' => 'replace',
    //     ),
    // );
    // $form['debug_info'] = array(
    //     '#type' => 'item',
    //     '#prefix' => '<div id="debuginfo">TEST',
    //     '#postfix' => '</div>',
    // );
    return $form;
}

function os2web_settings_ahahdebug() {
    error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
    $html = '<p>TEST</p>';
    drupal_json(array('status' => TRUE, 'data' => $html));
}

function os2web_settings_start_form_submit(&$form, &$form_state) {
    $fields = db_select('field_config', 'fc')->fields('fc', array('field_name'))->execute()->fetchCol();
    $batch = array(
        'operations' => array(array('os2web_settings_langfix_disable_translation', array())),
        'finished' => 'os2web_settings_langfix_finished',
    );
    foreach ($fields as $field) {
        //  $batch['operations'][] = array('os2web_settings_langfix_process', array('revision', $field));
        $batch['operations'][] = array('os2web_settings_langfix_process', array('data', $field));
    }
    batch_set($batch);
}

function os2web_settings_langfix_finished($success, $results, $operations) {
    error_log("Var: \$results = " . print_r($results, 1));
}

function os2web_settings_langfix_disable_translation(&$context) {
    db_query('UPDATE {field_config} SET translatable = 0');
    $context['finished'] = 1;
}

function os2web_settings_langfix_process($type, $field, &$context) {
    // Local init
    $table = 'field_data_' . $field;
    $revtable = 'field_revision_' . $field;

    // Find dubes
    // Update language for all non-dupes
    $rows = db_query('SELECT entity_id,count(language) as c FROM {' . $table . '} GROUP BY entity_id, delta HAVING c > 1 ORDER BY c DESC');
    $dupes = $rows->fetchCol();
    if (!empty($dupes)) {
        error_log("Var: \$field = " . print_r($field, 1));
        error_log("Var: \$dupes = " . print_r($dupes, 1));
    }

    $context['result']['dupes'] = array_merge($context['result'], $dupes);

    $ids = db_select($table, 'f')
            ->fields('f')
            ->condition('language', 'da');
    if (count($dupes) > 0) {
        $ids = $ids->condition('entity_id', $dupes, 'NOT IN');
    }
    $ids = $ids->execute();
    while ($row = $ids->fetchObject()) {
        error_log("Var: \$row->entity_id = " . print_r($row->entity_id, 1));
        db_update($table)
                ->fields(array(
                    'language' => 'und'
                ))
                ->condition('entity_id', $row->entity_id)
                ->condition('revision_id', $row->revision_id)
                ->condition('delta', $row->delta)
                ->execute();

        $revcount = db_select($revtable, 'r')
                        ->fields('r')
                        ->condition('entity_id', $row->entity_id)
                        ->condition('revision_id', $row->revision_id)
                        ->condition('delta', $row->delta)
                        ->execute()->rowCount();
        error_log("Var: \$revcount = " . print_r($revcount, 1));

        if ($revcount > 1) {
            error_log('possible dupe found in revision table.');
        }
        else {
            db_update($revtable)
                    ->fields(array(
                        'language' => 'und'
                    ))
                    ->condition('entity_id', $row->entity_id)
                    ->condition('revision_id', $row->revision_id)
                    ->condition('delta', $row->delta)
                    ->execute();
        }
    }

    $context['message'] = t('Processing %field', array('%field' => $field, '%nid' => $context['sandbox']['progress'] + 1, '%total' => $context['sandbox']['max']));

    $context['finished'] = 1;
}