<?php
/**
 * os2dagsorden_adlib_api
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package  OS2Dagsorden_Adlib_Api
 * @author   Jesper Mathiassen <jm@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
define('ADLIB_TEST_FID', FALSE);

/**
 * Implementation of hook_menu
 *
 * @return created menu links
 */
function os2dagsorden_adlib_api_menu() {
  $items['os2dagsorden/adlib/test'] = array(
      'title' => t('AdLib test page'),
//    'description' => t('Your description goes here.'),
      'access callback' => TRUE,
      'page callback' => 'os2dagsorden_adlib_api_page',
      'type' => MENU_CALLBACK,
  );
    $items['os2dagsorden/adlib/delete_all_jobs'] = array(
        'title' => 'AdLib delete all jobs',
        'access callback' => TRUE,
        'page callback' => 'os2dagsorden_adlib_api_delete_all_jobs',
        'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Implementation of test page fallback
 *
 * @return none
 */
function os2dagsorden_adlib_api_page() {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
  $fid = ADLIB_TEST_FID;
//  $nid = 74558;
//   db_delete('os2dagsorden_adlib_api_doc_files')->condition('fid',$fid)->execute();
//   os2dagsorden_adlib_api_convert_to_html($fid,$nid);
//   os2dagsorden_adlib_api_convert_to_pdf($fid);
//  _os2dagsorden_adlib_api_process_pdf();
//  sleep(5);
  _os2dagsorden_adlib_api_process_pdf();
  $file = db_select('os2web_adlib_api_doc_files','df')->fields('df')->condition('fid',$fid)->execute()->fetchObject();
  $adlib = _os2dagsorden_adlib_api_get_instance();
//  $call = array();
//  $call[] = explode('\\',$adlib->addJobFolder());
//  $call[] = $adlib->deleteJobFolder($call[0][1]);
  $call = $adlib->getJobStatus($file->job_id);
 // $call= file_load(ADLIB_TEST_FID);
// $call = node_load($nid,NULL,TRUE);

  return '<textarea cols=100 rows=50>' . print_r($call, 1) . '</textarea>';
}

function os2dagsorden_adlib_api_delete_all_jobs() {
    $adlib = _os2dagsorden_adlib_api_get_instance();

    $jobs = db_select('os2web_adlib_api_doc_files', 'adlib')
    ->fields('adlib', array('job_id', 'job_info'))
    //->condition('job_id', 'complete', '!=')
    ->execute()
    ->fetchAll();

    foreach ($jobs as $job){
      print_r($job->job_id);
      $jobfileinfo = unserialize($job->job_info);
      $folder = explode('\\',$jobfileinfo['basefolder']);
      print_r($folder[1]);
      $adlib->deleteJob($job->job_id);
      $adlib->deleteJobFolder($folder[1]);
    }
}


/**
 * Implementation of hook_cron
 *
 * @return none
 */
function os2dagsorden_adlib_api_cron() {
  _os2dagsorden_adlib_api_process_pdf();
}

/**
 * Implementation of hook_init()
 */
function os2dagsorden_adlib_api_init() {
 // _os2dagsorden_adlib_api_process_pdf(1);
}

/**
 * Converts a fid to html and injects into nid body field
 * 
 * @param int $fid file id
 * @param int $nid node id
 * 
 * @access public
 *
 * @return void
 */
function os2dagsorden_adlib_api_convert_to_html($fid, $nid ) {
  if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 1))->rowCount()) {
    $record = array(
        'fid' => $fid,
        'did' => $nid,
        'jobtype' => 1,
        );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    if (ADLIB_TEST_FID) {
      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing.");
    }
    return TRUE;
  } else {
    //      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
    return FALSE;
  }
}

/**
 * Main call to queue file for converting.
 *
 * @param int $fid    fid of a managed file
 * @param int $docref arbitrary identifier for later reference (ie. Doc id)
 *
 * @return boolean
 */
function os2dagsorden_adlib_api_convert_to_pdf($fid, $docref = NULL) {
  if (!_os2dagsorden_adlib_api_is_file_pdf($fid)) {
    if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 0))->rowCount()) {
      $record = array(
          'fid' => $fid,
          'did' => $docref,
          'jobtype' => 0,
      );
      drupal_write_record('os2web_adlib_api_doc_files', $record);
      if (ADLIB_TEST_FID) {
        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing.");
      }
      return TRUE;
    } else {
//      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
      return FALSE;
    }
  } else {
//    error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already PDF.");
    $record = array(
        'fid' => $fid,
        'did' => $docref,
        'job_id' => 'Complete',
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    return FALSE;
  }
}

/**
 * Return the fid of a file saved with a reference
 *
 * @param int $ref Reference for the file
 *
 * @return int
 */
function os2dagsorden_adlib_api_get_fid($ref) {
    return (int)db_query('SELECT fid FROM {os2web_adlib_api_doc_files} WHERE did=:did',array(':did' => $ref))->fetchField();
}

/**
 * Factory for class instances. This allows easy changing between api classes.
 * TODO: Make this proper plugin-able.
 *
 * @return AdLibWS object
 */
function _os2dagsorden_adlib_api_get_instance() {
  $obj = &drupal_static(__FUNCTION__);
  if (is_object($obj))
    return $obj;
  module_load_include('inc', 'os2dagsorden_adlib_api', '/includes/AdLibWS.class');
  return $obj = new AdLibWS();
}

/**
 * Processes the entries, which were added to the database. Sends the jobs to Adlib and receives the completed jobs, updating the Drupal content.
 * 
 * @param mixed $limit limit for processing files 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_process_pdf($limit = FALSE) {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
// Locate any finished jobs
  $files = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->isNotNull('job_id')
      ->condition('job_id', array('Complete'), 'NOT IN');
      if (ADLIB_TEST_FID) {
        $files = $files->condition('fid',ADLIB_TEST_FID);
      }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2dagsorden_adlib_api_get_instance();

    foreach ($files as $file) {
      $jobinfo = $adlib->getJobStatus($file->job_id);
      if (in_array($jobinfo->status, array('Not found', 'Failed'))) {
        $jobfileinfo = unserialize($file->job_info);
        $adlib->deleteJob($file->job_id);
        $folder = explode('\\',$jobfileinfo['basefolder']);
        $adlib->deleteJobFolder($folder[1]);
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => null,
            'job_info' => null,
        );
        drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid','jobtype'));
        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job failed and reset: " . $file->fid);
      } elseif (in_array($jobinfo->status, array('Complete'))) {
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => 'Complete',
        );
        $jobfileinfo = unserialize($file->job_info);

        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job complete. Fetching file");
        $file_url = $jobfileinfo['out_url'] . rawurlencode($jobfileinfo['out_filename']);
        $download = curl_init($file_url);
        if (variable_get('os2web_pws_proxy')) {
          curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
          curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
          curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
        }
        curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
        $data = curl_exec($download);

        $info = curl_getinfo($download);
        if ($info['http_code']===200 && $info['size_download']>4 ) {
          switch ($file->jobtype) {
            case 0: // PDF
              $upd_file = file_load($file->fid);
              error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File recieved successfully, Saving.");
              $uri = file_unmanaged_save_data($data, dirname($upd_file->uri) . '/' . $jobfileinfo['out_filename'], FILE_EXISTS_REPLACE);
              error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $uri = ' . print_r($uri, 1));
              if (filesize(drupal_realpath($uri)) > 0) {
                //            file_unmanaged_delete($upd_file->uri);
                db_delete('file_managed')->condition('uri', $uri);
                $upd_file->uri = $uri;
                $upd_file->filename = basename($uri);
                $upd_file->filemime = file_get_mimetype($upd_file->uri);
                $upd_file->filesize = filesize(drupal_realpath($upd_file->uri));
                $upd_file->timestamp = time();
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid','jobtype'));
//                drupal_write_record('file_managed', $upd_file, array('fid'));
                $adlib->deleteJob($file->job_id);
                $folder = explode('\\',$jobfileinfo['basefolder']);
                $adlib->deleteJobFolder($folder[1]);
                error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File saved, file record updated.");
              } else {
                error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Filesize was 0. Aborting update.");
              }
              break;
            case 1: // HTML 
              $nid = $file->did;
              if ($node = node_load($nid)) {
		$data = _os2dagsorden_adlib_api_improve_html($data);

                $node->field_bpa_body[LANGUAGE_NONE][0]['value'] = $data;
                $node->field_bpa_body[LANGUAGE_NONE][0]['format'] = 'full_html';
                $node->feeds = array();
                node_save($node);
                $adlib->deleteJob($file->job_id);
                $folder = explode('\\',$jobfileinfo['basefolder']);
                $adlib->deleteJobFolder($folder[1]);
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid','jobtype'));
                error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - File converted, node updated.');
              }
              break;
            default:
              error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - Unknown jobtype');
          }

        }
      }
    }
  }

// Start new job if needed
  $files = db_select('os2web_adlib_api_doc_files', 'f')->fields('f')->isNull('job_id');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid',ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();

  if ($files->rowCount() > 0) {
    $adlib = _os2dagsorden_adlib_api_get_instance();

    while ($file = $files->fetchObject()){
      $file->file = file_load($file->fid);
      $filename = drupal_realpath($file->file->uri);

      if (is_file(drupal_realpath($file->file->uri))) {
        $upload = $adlib->uploadData($file->file->filename, file_get_contents(drupal_realpath($file->file->uri)));
        if ($upload) {
          $job = $adlib->addJob($upload,$file->jobtype);
          if ($job !== FALSE) {
            $jobinfo = array(
                'fid' => $file->fid,
                'jobtype' => $file->jobtype,
                'job_id' => (string) $job->JobSettings['JobID'],
                'job_info' => $upload,
                );
            drupal_write_record('os2web_adlib_api_doc_files', $jobinfo, array('fid','jobtype'));
          }
        }
      }
    }
  }
}

/**
 * Makes some general HTML improvement in orden to make the visual representation better.
 * 
 * @author Stanislav Kutasevits <stan@bellcom.dk>
 * @param string $data attachment text
 *
 * @return modified text.
 */
function _os2dagsorden_adlib_api_improve_html($data) {

    //remove HEAD tag - serves no need
    $pos_head_start = strrpos($data, "<HEAD>");
    $pos_head_end = strrpos($data, "</HEAD>") + strlen("</HEAD>");
    $data = substr($data, 0, $pos_head_start) . substr($data, $pos_head_end);

    //decode spec. characters
    $data = utf8_encode($data);

    //general HTML improvements
    $data = str_replace("position:absolute", "position:relative", $data); //change html positioning
    $data = preg_replace('/top:[0-9]*\.[0-9]*pt;/i', '', $data); //remove top attribute
    $data = str_replace("&#61623</FONT></FONT></FONT></SPAN>\r\n", "•</FONT></FONT></FONT></SPAN>", $data); //fix bullet point dot representation

    return $data;
}

/**
 * Cleanup job
 * 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_cleanup_files() {
  $dir = preg_replace('/\/$/', '', DEFAULT_DOC_CACHE_PATH); // Remove trailing /
  $filelist = file_scan_directory($dir, '/.*/');
  foreach ($filelist as $uri => $file) {
    $file = db_select('file_managed', 'f')->fields('f')->condition('uri', $uri)->execute()->fetchAll();
    if (count($file) === 0) {
      // File is not linked in the drupal database
//        file_unmanaged_delete($uri);
//        error_log(basename(__FILE__) . ':' . __LINE__ . ' Deleted: ' . print_r($uri, 1));
    }
  }
}

/**
 * Checks if the file is in PDF
 * 
 * @param mixed $fid 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_is_file_pdf($fid) {
  if (is_array($fid)) {
    $result = array();
    $files = file_load_multiple($fid);
    foreach ($files as $file) {
      $result[$file->fid]['is_pdf'] = strcasecmp(pathinfo($file->filename, PATHINFO_EXTENSION), 'pdf') === 0;
      $result[$file->fid]['file'] = $file;
    }
    return $result;
  } else {
    return strcasecmp(pathinfo(file_load($fid)->filename, PATHINFO_EXTENSION), 'pdf') === 0;
  }
}