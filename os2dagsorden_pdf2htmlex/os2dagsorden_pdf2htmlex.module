<?php

/**
 * os2dagsorden_pdf2htmlex
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package  OS2Dagsorden_Pdf2htmlex
 * @author   Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
define('DEFAULT_PDF_HTML_ZOOM', 1.25); // default zoom for convertion
define('DEFAULT_TEMP_DIR', variable_get('file_temporary_path', '/tmp/')); // default zoom for convertion
define('DEFAULT_PDF_HTML_TRANS_LIMIT', 10);//number of files to handle at once

// to delete
function os2dagsorden_pdf2htmlex_menu() {
    $items = array();
    $items['os2dagsorden/run_pdf_html'] = array(
	'page callback' => 'os2dagsorden_pdf2htmlex_do_convert',
	'access arguments' => array('administer os2web'),
	'type' => MENU_CALLBACK,
    );
    return $items;
}

function os2dagsorden_pdf2htmlex_do_convert(){
    global $debug_info;
    os2dagsorden_pdf2htmlex_cron();
    return '<div><textarea cols="150" rows=50>' . print_r($debug_info, 1) . '</textarea>';

//    reschedule all
//     $nodes = entity_load('node', FALSE, array('type' => 'bullet_point_attachment'));
//     foreach ($nodes as $node){
//       if (!empty($node->field_bpa_file)){
// 	print_r($node->nid . ' ' . $node->field_bpa_file['und'][0]['fid']);
// 	$file = file_load($node->field_bpa_file['und'][0]['fid']);
// 	if (strcmp($file->filemime,'application/pdf') == 0){
// 	  os2dagsorden_pdf2htmlex_schedule($node->field_bpa_file['und'][0]['fid'], $node->nid);
// 	  print_r("<br/>");	
// 	}
//       }
//     }
}

/**
 * Schedules the future convertion
 *
 * @param int $fid file id
 * @param int $did node id
 *
 * @return none
 */
function os2dagsorden_pdf2htmlex_schedule($fid, $did) {
  db_insert('os2dagsorden_pdf2htmlex_files')
    ->fields(array(
      'fid' => $fid,
      'did' => $did,
      //'created_filepath' => $file_path,
      'filename' => NULL,
      'progress' => NULL,
    ))
    ->execute();
}

/**
 * Cron implementation.
 * Goes through the enrties in database table, converts the new records,
 * also updates the destination node with the html taken from converted file.
 * When node is updated, the database entry progress field is changed to Complete.
 *
 * Also calls function to update meeting status.
 *
 * @return none
 */
function os2dagsorden_pdf2htmlex_cron() {
    //make convertion
    $query = db_select('os2dagsorden_pdf2htmlex_files', 'f');
    $query->fields('f',array('fid','did'))
    ->isNull('f.progress')
    ->range(0,DEFAULT_PDF_HTML_TRANS_LIMIT);
    $result = $query->execute();

    while($record = $result->fetchAssoc()) {
    error_log($record['fid']);
        os2dagsorden_pdf2htmlex_convert($record['fid'], $record['did']);
    }
    
    //go through the finished tasks
    $query = db_select('os2dagsorden_pdf2htmlex_files', 'f');
    $query->fields('f')
	  ->condition('progress', 'Converted')
	  ->range(0,DEFAULT_PDF_HTML_TRANS_LIMIT);
    $result = $query->execute();
    
    while($record = $result->fetchAssoc()) {
	$destination = node_load($record['did']);
	
	$data = file_get_contents($record['created_filepath']);
	
	//convert the real path back to drupal path
	$file_path_real = explode('/',$record['created_filepath']);
	$filename = array_pop($file_path_real);
	$acadre_dir = array_pop($file_path_real);
	
	$path = 'private://' . $acadre_dir . '/' . $filename ;
	
	$fid = db_select('file_managed', 'fm')
                        ->fields('fm', array('fid'))
                        ->condition('uri', $path)
                        ->execute()->fetchField();

        if ($fid) {
	    $file = file_load($fid);
	    $file->display = 1;
	} else {
	  $file = new stdClass();
	  $file->uri = $path;
	  $file->display = 1;
	  $file->filename = $filename;
	  $file->filemime = file_get_mimetype($record['created_filepath']);
	  $file->uid = 1;
	  $file->status = FILE_STATUS_PERMANENT;
	  
	  $file = file_save($file);
	}
	
	$destination->field_bpa_file_html[LANGUAGE_NONE][0] = (array) $file;
        $destination->field_bpa_page_amount[LANGUAGE_NONE][0]['value'] = _os2dagsorden_pdf2htmlex_calc_page_amount($data);
        
        node_save($destination);
	
	//deleting
        //db_delete('os2dagsorden_pdf2htmlex_files')
	//  ->condition('fid', $record['fid'])
	//  ->condition('did', $record['did'])
	//  ->execute();
	
	//updating database entry
	db_update('os2dagsorden_pdf2htmlex_files')
	  ->fields(array(
	    'progress' => 'Completed',
	  ))
	  ->condition('fid', $record['fid'])
	  ->condition('did',$record['did'])
	  ->execute();
	  
	_os2dagsorden_pdf2htmlex_set_meeting_status_published_plus($destination);
    }
}

/**
 * Calculate the amount of the pages in HTML file.
 *
 * @param string $html html code
 *
 * @return page amount
 */
function _os2dagsorden_pdf2htmlex_calc_page_amount($html){
  $doc = new DOMDocument();
  libxml_use_internal_errors(true);
  $doc->loadHTML($html);
  libxml_clear_errors();
  
  $finder = new DomXPath($doc);
  $nodes = $finder->query('//div[@id="pdf-main"]/div');    
  
  $pages = 0;
  foreach ($nodes as $node) {
    $pages++;
  }
  return $pages;
}

/**
 * Improvment of the HTML code, produced by pdf2htmlEX
 * At the moment only removes the empty paragraph tags.
 *
 * @param string $data html code
 *
 * @return data
 */
function _os2dagsorden_pdf2htmlex_improve_html($data){
  $data = str_replace("<p>&nbsp;</p>", "", $data); //removing unneeded paragraphs
  $data = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $data);//removing scripts tags
  $data = preg_replace('#::selection{(.*?)}#is', '', $data);//removing ::selection css specification
  $data = preg_replace('#::-moz-selection{(.*?)}#is', '', $data);//removing ::-moz-selection css specification
  
  return $data;
}

/**
 * Call to console pdf2htmlEX programm ro convert PDF to html.
 * Updates the record progress to Converted on success, and file_not_found is the file is missing.
 *
 * @param int $fid file id
 * @param int $did node id
 *
 * @return none
 */
function os2dagsorden_pdf2htmlex_convert($fid, $did) {
  $file = file_load($fid);
  
  $file_path_real = drupal_realpath($file->uri);//with file name
  $file_path_real_arr = explode('/', $file_path_real);
  array_pop($file_path_real_arr);
  $dest_dir_real = implode('/', $file_path_real_arr);//without file name
  
  if (isset($file)){
    shell_exec('pdf2htmlEX ' . $file_path_real . '  --dest-dir ' . $dest_dir_real . ' --zoom ' . DEFAULT_PDF_HTML_ZOOM);
    
    $file_name_no_ext = explode('.', $file->filename);
    $assumed_path1 = $dest_dir_real . '/' . $file_name_no_ext[0] . '.html';//filename.html
    $assumed_path2 = $dest_dir_real . '/' . $file_name_no_ext[0] . '.PDF' . '.html';//filename.PDF.html
    
    if (file_exists($assumed_path1)) {
      $path = $assumed_path1;
    }
    else {
      $path = $assumed_path2;
    }
    $data = file_get_contents($path);
    
    //rewritting with improved HTML code
    $fh = fopen($path, 'w');
    fwrite($fh, _os2dagsorden_pdf2htmlex_improve_html($data));
    fclose($fh);
	
    //updating database entry
    db_update('os2dagsorden_pdf2htmlex_files')
      ->fields(array(
	'filename' => $file->filename,
	'created_filepath' => $path,
	'progress' => 'Converted',
      ))
      ->condition('fid', $fid)
      ->condition('did', $did)
      ->execute();
  } else {
    db_update('os2dagsorden_pdf2htmlex_files')
      ->fields(array(
	'progress' => 'file_not_found',
      ))
      ->condition('fid', $fid)
      ->condition('did', $did)
      ->execute();
  }   
}

/**
 * Changes the status of the parent meeting of the given bullet point attachment to Publiceret+ 
 * if all of the attachments of all of the corresponding bullet points of that meeting are converted to HTML.
 * 
 * @author Stanislav Kutasevits <stan@bellcom.dk>
 * @param string $node bullet points attachment
 *
 * @return none
 */
function _os2dagsorden_pdf2htmlex_set_meeting_status_published_plus($node) {
    //assuming that all attachmens are converted, will be examined above
    $all_attachments_converted = true;

    //getting corresponding bullet point
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_ref_attachment', 'target_id', $node->nid, '=');
    $result = $query->execute();

    if (isset($result['node'])) {//if success
      $nids = array_keys($result['node']);
      $bullet_point = reset(entity_load('node', $nids));

      //getting corresponding meeting
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_ref_bullet_points', 'target_id', $bullet_point->nid, '=');

      $result = $query->execute();

      if (isset($result['node'])) {//if success
	$nids = array_keys($result['node']);
	$meeting = reset(entity_load('node', $nids));
	
	//goint through all the meetings bullet points
	if (!empty($meeting->field_ref_bullet_points['und'])) {
	    foreach ($meeting->field_ref_bullet_points['und'] as $ref_bullet_point) {
		$bullet_point = node_load($ref_bullet_point['target_id']);
		
		//going through all the bullet points attachments
		if (!empty($bullet_point->field_ref_attachment['und'])) {
		    foreach ($bullet_point->field_ref_attachment['und'] as $ref_bullet_point_attachment) {
			$attachment = node_load($ref_bullet_point_attachment['target_id']);
			
			if (empty($attachment->field_bpa_body['und'][0]['value']) && empty($attachment->field_bpa_file_html['und'][0])){
			  $all_attachments_converted = false;
			  break;
			}
		    }
		}
	    }
	}
	if ($all_attachments_converted){
	    $meeting->field_meeting_status['und'][0]['value'] = 'Publiceret+';
	    node_save($meeting);
	}
      }
    }
}

/**
 * Returns the html code with only first page remaining.
 *
 * Is used in the places where only preview of the document is shown.
 *
 * @param string $html html
 * @param int    $meeting_id       nid of the meeting
 * @param int    $bullet_point_id  nid of the bullet point
 * @param int    $bilag_id         nid of the bullet point attachment
 *
 * @return html with selected pages left
 */
function os2dagsorden_pdf2htmlex_print_first_page($html, $meeting_id, $bullet_point_id, $bilag_id){
    $html = utf8_decode($html);
    
    $doc = new DOMDocument();
    libxml_use_internal_errors(true);
    $doc->loadHTML($html);
    libxml_clear_errors();
    
    $finder = new DomXPath($doc);
    $nodes = $finder->query('//div[@id="pdf-main"]/div');    
    
    $i = 1;
    foreach ($nodes as $node) {
      if ($i > 1)//keeping the first page
	$node->parentNode->removeChild($node);
      $i++;
    }
    $html = $doc->saveHTML();
    
    $start = strrpos($html, '<style type="text/css">');//last style - document specific
    $end = strrpos($html, '</style>');//last style - document specific
    $style_cut = substr($html, $start, $end+count('<style>')-$start);
   
    $styles_specific = explode(PHP_EOL, $style_cut);
    for ($i = 0; $i < count($styles_specific); $i++){
      if (substr($styles_specific[$i], 0, 1) === '.' || substr($styles_specific[$i], 0, 1) === '#')//id or class
	$styles_specific[$i] = '.bpa-' . $meeting_id . '-' . $bullet_point_id . '-' . $bilag_id . ' ' . $styles_specific[$i];
    }
    $style_specific = implode(PHP_EOL, $styles_specific);
    $html = substr_replace($html, $style_specific, $start, $end+count('<style>')-$start); //replacing the last style with updated

    return $html;
}

/**
 * Returns the html code with only selected pages remaining.
 *
 * Is used in the places where only preview of the document is shown.
 *
 * @param string $html      html
 * @param int    $startPage start page number (incl)
 * @param int    $endPage   end page number (incl)
 *
 * @return html with selected pages left
 */
function os2dagsorden_pdf2htmlex_hide_unused_pages($html, $startPage, $endPage){
    $html = utf8_decode($html);
    
    $doc = new DOMDocument();
    libxml_use_internal_errors(true);
    $doc->loadHTML($html);
    libxml_clear_errors();
    
    $finder = new DomXPath($doc);
    $nodes = $finder->query('//div[@id="pdf-main"]/div');    
    
    $i = 1;
    foreach ($nodes as $node) {
      if ($i < $startPage || $i > $endPage){//if outside the allowed borders
	  $node->removeAttribute("style");
	  $node->setAttribute("style", "display: none;");	  
	  foreach($node->childNodes as $child) {
	    if ($child instanceof DOMElement) {
	      $child->removeAttribute("style");
	      foreach($child->childNodes as $child_child){
		  if ($child_child instanceof DOMElement)
		    $child_child->removeAttribute("style");
	      }
	    }
	  }
	}
      $i++;
    }
    return $doc->saveHTML();
}